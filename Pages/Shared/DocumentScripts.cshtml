@model string
@{
    var id = Model.IsValid() ? Model : "app";
    var jsonData = Vue.Encode(new BSOL.Core.Entities.Document());
}
@Html.Kendo().Window().Name("wndDoc" + id).Content(@<text>
        <div id="@(id)AddDoc">
            @await Html.PartialAsync("Loader")
            <form v-on:submit.prevent="submitForm">
                <div class="components">
                    <div class="form-group" v-if="DisplayCategory">
                        <label for="Category">Category</label>
                        <input type="text" v-model.trim="input.Category" class="k-textbox" />
                    </div>
                    <div class="form-group" id="uploadControl">
                        <label for="FileName">File</label>
                        <table>
                            <tr>
                                <td>
                                    <input type="text" v-model.trim="input.FileName" class="k-textbox" readonly @@click="browseFile" />
                                </td>
                                <td>
                                    <button class="btn btn-upload" type="button" @@click="browseFile">Browse</button>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="form-group">
                        <label for="DisplayName">Name</label>
                        <input type="text" v-model.trim="input.DisplayName" class="k-textbox" />
                    </div>
                    <div class="form-group" style="text-align: right">
                        <button v-if="AutoUpload" type='submit' class='btn btn-save btn-cntrls' title='Upload'><i class='fa fa-check'></i>Upload</button>
                        <button v-if="!AutoUpload" type='submit' class='btn btn-save btn-cntrls' title='Ok'><i class='fa fa-check'></i>Ok</button>
                        <button type='button' class='btn btn-cancel btn-cntrls' title='Cancel' @@click="cancel"><i class='fa fa-check'></i>Cancel</button>
                    </div>
                </div>
            </form>
            <div style="display: none" v-for="x in Files" class="documentToUpload" :data-id="x">
                <kendo-upload name="File"
                              :id="'file' + x"
                              :async-auto-upload="false"
                              :multiple="false"
                              async-save-url="@Url.Action("Upload", "Document")"
                              @@upload="fileUpload"
                              @@success="fileUploadSuccess"
                              @@select="fileSelect">
                </kendo-upload>
            </div>

            <div class="doc-list hl-list">
                <ul>
                    <li v-for="(x,index) in Items">
                        <table>
                            <tr>
                                <td class="fileicon"><i :class="getDocIcon(x.FileName)"></i></td>
                                <td class="file-details">
                                    {{x.DisplayName}}<br />
                                    <span class="file-size">{{x.FileSize}}</span>
                                    <a v-if="x.ID" class="fa fa-download cntrl-icon" title="Download" :href="'@Url.Action("Download", "Document")/' + x.ID"></a>
                                    <a class="fa fa-times cntrl-icon" title="Delete" :href="'javascript:@(id).Doc.deleteItem(' + index + ')'"></a>
                                    <span class="cnt-unsaved" v-if="!x.ID" title="Un Saved"></span>
                                </td>
                            </tr>
                        </table>
                    </li>
                </ul>
            </div>
        </div>
    </text>).Visible(false).Title("Upload Document").Draggable(true)
<script type="text/javascript">
    @(id).Doc.init = function (reference, successCallBack, inlineView, validateFileTypes) {
        this.Reference = reference;
    @(id)AddDoc.successCallBack = successCallBack;
    @(id)AddDoc.inlineView = inlineView ? inlineView : false
    @(id)AddDoc.ValidateFileTypes = validateFileTypes ? validateFileTypes.split(',') : [];
    };
    @(id).Doc.reset = function () {
        this.Items = [];
        this.ReferenceID = 0;
    @(id)AddDoc.Files =[];
    };
    @(id).Doc.load = function (referenceId) {
        this.Items = [];
        if (referenceId)
            this.ReferenceID = referenceId;

        var self = this;
        $.getData("@Url.Action("GetDocuments", "Document")", { Reference: this.Reference, referenceId: this.ReferenceID }, function (res) {
            if (@(id)AddDoc.inlineView)
    @(id)AddDoc.Items = res;
                            else
            self.Items = res;
        });
    };
    @(id).Doc.save = function (referenceId) {
        this.ReferenceID = referenceId
        if (@(id)AddDoc.Files.length) {
    @(id)AddDoc.CurrentIndex = 0;
    @(id)AddDoc.isLoaded = false;
    @(id)AddDoc.recursiveUpload();
            return true;
        }
        return false;
    };
    @(id).Doc.deleteItem = function (i) {

        var item = @(id)AddDoc.inlineView ? @(id)AddDoc.Items[i] : this.Items[i];

        var self = this;

        if (item.ReferenceId) {
            kendoConfirm("Do you want to delete this Document (" + item.DisplayName + ")?", function () {
                $.post("@Url.Action("Delete", "Document")", { Id: item.Id }, function (res) {
                    self.load();
                });
            });
        }
        else {
    @(id)AddDoc.Files = $.grep(@(id)AddDoc.Files, function (x) { return x != item.UploadControlID });
            if (@(id)AddDoc.inlineView)
    @(id)AddDoc.Items.splice(i, 1);
            else
                this.Items.splice(i, 1);
        }
    };
</script>

<script type="text/javascript">
    var @(id)AddDoc = new Vue({
        el: "#@(id)AddDoc",
        data: {
            DisplayCategory: false,
            input: @(jsonData),
            Files: [],
            successCallBack: null,
            AutoUpload: false,
            CurrentIndex: 0,
            inlineView: false,
            Items: [],
            ValidateFileTypes: [],
            isLoaded: true
        },
        methods: {
            open: function () {
                $("#wndDoc@(id)").getKendoWindow().open().center();
                this.reset();
            },
            reset: function () {
                this.AutoUpload = @(id).Doc.ReferenceID > 0;
                this.input = @(jsonData);
                if (this.AutoUpload)
                    this.Files = [];
                this.input.UploadControlID = this.Files.length;
                this.Files.push(this.input.UploadControlID);
            },
            cancel: function () {
                this.Files.pop();
                $("#wndDoc@(id)").getKendoWindow().close();
            },
            validateForm: function () {
                removeError();
                var isValid = true;
                var setError = function (cntrl, msg) {
                    isValid = false;
                    showError(cntrl, msg);
                };
                var item = this.input;
                if (!item.DisplayName)
                    setError('DisplayName');
                if (!item.FileName)
                    setError('FileName');
                return isValid;
            },
            submitForm: function () {
                if (!this.validateForm())
                    return;

                if (this.AutoUpload) {
                    this.CurrentIndex = 0;
                    this.isLoaded = false;
                    this.recursiveUpload();
                }
                else {
                    this.input.ID = null;
    @(id).Doc.Items.push(this.input);
                    $("#wndDoc@(id)").getKendoWindow().close();
                }
            },
            browseFile: function () {
                $("#file" + this.input.UploadControlID).click();
            },
            recursiveUpload: function () {
                if (this.CurrentIndex < this.Files.length) {
                    var $file = $("#@(id)AddDoc [data-id=" + this.Files[this.CurrentIndex] + "]" + " .k-upload-selected");
                    if ($file.length)
                        $file.click();
                    return;
                }

                this.isLoaded = true;
                this.Files = [];
                if (this.AutoUpload) {
    @(id).Doc.load();
                    if (!this.inlineView)
                        $("#wndDoc@(id)").getKendoWindow().close();
                    else
                        this.reset();
                }
                else if (this.successCallBack)
                    this.successCallBack({ Message: "Saved successfully." });
            },
            fileSelect: function (e) {
                if (this.ValidateFileTypes && this.ValidateFileTypes.length) {
                    if (!$.grep(this.ValidateFileTypes, function (x) { return "." + x.toLowerCase() == e.files[0].extension.toLowerCase() }).length) {
                        kendoAlert("Only " + (this.ValidateFileTypes.toString()) + " file(s) can be uploaded", true);
                        e.files[0].name = "";
                        e.sender.removeAllFiles();
                        e.preventDefault();
                        return;
                    }
                }

                this.input.FileName = e.files[0].name;
                this.input.FileSize = formatFileSize(e.files[0].size);
                if (!this.input.DisplayName)
                    this.input.DisplayName = this.input.FileName.split('.').slice(0, -1).join('.');
            },
            fileUpload: function (e) {
                var uploadControlID = this.Files[this.CurrentIndex];
                e.data = this.AutoUpload ? this.input : $.grep(@(id).Doc.Items, function (x) { return x.UploadControlID == uploadControlID })[0];
                e.data.Reference = @(id).Doc.Reference;

                e.data.ReferenceId = @(id).Doc.ReferenceID;
            },
            fileUploadSuccess: function () {
                this.CurrentIndex++;
                this.recursiveUpload();
            }
        }
    });
</script>