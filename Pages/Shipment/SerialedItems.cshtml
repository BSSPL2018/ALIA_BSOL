@page
@using BSOL.Core.Models.Shipment
@{
    ViewData["Title"] = "Serialed Items";
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewBag.IsFolded = true;
}
@section BreadCrumb{
    @await Html.PartialAsync("Tabs", "Material Management/Shipments")
}
@if (!await Html.HasAccess(Forms.Procurement.Shipments))
{
    return;
}
<div class="row" id="app">
    <div class="col-md-5">
        <div class="g-title">
            <div class="g-left">
                <ul class="tg-btn tg-fixed" style="margin-top: 1px;">
                    <li :class="{'tg-active': StatusFilter == 0}"><a href="javascript:app.setStatus(0)">Pending</a></li>
                    <li :class="{'tg-active': StatusFilter == 1}"><a href="javascript:app.setStatus(1)">Completed</a></li>
                </ul>
            </div>
        </div>
        @(Html.Kendo().Grid<ShipmentPOSerialModel>()
  .Name("gridSI")
  .Columns(x =>
  {
      x.Bound(c => c.ShipmentRefNo).Title("Shipment").Width(130);
      x.Bound(c => c.PORefno).Title("Purchase Order").Width(140);
  })
  .Sortable()
  .Scrollable()
  .Selectable()
  .Pageable(x => x.Refresh(true))
  .Resizable(x => x.Columns(true))
              .EnableFilter()
              .HtmlAttributes(new { @class = "h-grid v-grid" })
              .DataSource(d => d
              .Ajax().ServerOperation(true).PageSize(50)
              .Read(read => read.Action("ReadSerialedShipments", "Shipment").Data("app.gridSIData"))
              ))
    </div>
    <div class="col-md-7">
        <div class="g-title">
            <div class="g-right">
                <button type='button' class='btn btn-save btn-cntrls' @@click='submitForm' title='Save'><i class='fa fa-check'></i>Save</button>
                <div v-if="StatusFilter == 1" class="cntrl-inline">
                    @Html.DeleteButton()
                </div>
                @Html.ExcelButton()
            </div>
        </div>

@(Html.Kendo().Grid<SerialedItemModel>().Name("grid")

            .Columns(c =>
            {
                c.Bound(x => x.Category).Width(120).Title("Product");
                c.Bound(x => x.ItemCode).Width(120).Title("Item Code");
                c.Bound(x => x.ModelCode).Width(120);
                c.Bound(x => x.SerialNo).Width(150);
                c.DescriptionColumn(x => x.Description).Width(300);
            })
            .AutoBind(false)
            .Editable(editable => editable.Mode(GridEditMode.InCell))
            .Events(x => x.CellClose("app.grid_CellClose"))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .ServerOperation(false)
                .PageSize(100)
                .Read(read => read.Action("ReadSerialedItems", "Shipment").Data("app.gridData"))
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.ItemCode).Editable(false);
                    model.Field(p => p.Description).Editable(false);
                    model.Field(p => p.Category).Editable(false);
                    model.Field(p => p.ModelCode).Editable(false);
                })
                )
        .EnableFilter()
        .Excel(x => x.AllPages(true))
        .Resizable(x => x.Columns(true))
        .Pageable(x => x.Refresh(true))
        .Sortable()
        .Scrollable()
        .HtmlAttributes(new { @class = "h-grid v-grid" })
)


    </div>
</div>

@section Scripts{
<script type="text/javascript">
    $(function () {
        $('#gridSI').on('click', 'tbody tr', function () {
            app.selectItem(null, $(this).attr('data-uid'));
        });
    });
</script>
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            data: {
                ShipmentId: null,
                PurchaseOrderId: 0,
                ItemCostingId:0,
                RefNo: "",
                IsCompleted: false,
                StatusFilter: 0
            },
            methods: {
                validateForm: function () {
                    removeError();
                    var isValid = true;
                    var setError = function (cntrl, msg) {
                        isValid = false;
                        showError(cntrl, msg);
                    };
                    
                    if (!isValid)
                        return false;

                    var items = $('#grid').getKendoGrid().dataSource.data();
                    if (!items.length) {
                        kendoAlert("There is no data to save.", true);
                        return false;
                    }

                    if (!this.ItemCostingId) {
                        kendoAlert("Please select shipment or local purchase.", true);
                        return false;
                    }

                    var emptySerialNos = 0, duplicatedItems = 0;
                    $.each(items, function (i, x) {
                        if (!x.SerialNo || !x.SerialNo.trim().length)
                            emptySerialNos++;
                        else if ($.grep(items, function (y) { return y.uid != x.uid && y.SerialNo && y.SerialNo.trim() == x.SerialNo.trim() }).length)
                            duplicatedItems++;
                    });

                    if (emptySerialNos > 0) {
                        kendoAlert(emptySerialNos + " row(s) has empty Serial No", true);
                        return false;
                    }

                    if (duplicatedItems > 0) {
                        kendoAlert(duplicatedItems + " row(s) has duplicated Serial No", true);
                        return false;
                    }

                    return isValid;
                },
                submitForm: function () {
                    if (!this.validateForm())
                        return;

                    var items = $('#grid').getKendoGrid().dataSource.data();

                    var serialedItems = [];
                    $.each(items, function (i, x) {
                        serialedItems.push({
                            Id:x.Id,
                            ItemId: x.ItemId,
                            SerialNo: x.SerialNo
                        })
                    });

                    $.postData("@Url.Action("SaveSerialedItems", "Shipment")",
                        {
                            ItemCostingId: this.ItemCostingId,
                            RefNo: this.RefNo,
                            SerialedItems: serialedItems
                        },
                        function (res) {
                            kendoAlert(res.Message, res.HasError);
                            if (res.HasError)
                                return;
                            if (app.StatusFilter == 0) {
                                $('#gridSI').getKendoGrid().dataSource.read();
                                $('#grid').getKendoGrid().dataSource.data([]);
                                app.ItemCostingId = 0;
                            }
                            else {
                                $('#grid').getKendoGrid().dataSource.read();
                            }   
                            app.IsCompleted = true;
                        });
                },
                deleteItem: function () {
                    var items = $('#grid').getKendoGrid().dataSource.data();
                    if (!items.length) {
                        kendoAlert("There is no data to delete.", true);
                        return false;
                    }
                    if (!this.ItemCostingId) {
                        kendoAlert("Please select shipment or local purchase.", true);
                        return false;
                    }
                    kendoConfirm("Do you want to delete this Serial No Entries (" + items.length + ")?", function () {
                        $.postData("@Url.Action("DeleteSerialedItems", "Shipment")", {
                            ItemCostingId: app.ItemCostingId,
                            RefNo: app.RefNo
                        }, function (res) {
                                kendoAlert(res.Message, res.HasError);
                                if (res.HasError)
                                    return;
                                $('#gridSI').getKendoGrid().dataSource.read();
                                $('#grid').getKendoGrid().dataSource.data([]);
                                app.ItemCostingId = 0;
                                app.IsCompleted = false;
                        });
                    });
                },
                selectItem: function (sender, uid) {
                    var item = uid ? $('#gridSI').getKendoGrid().dataSource.getByUid(uid) : $('#gridSI').getKendoGrid().dataItem($(sender).parent());
                    app.ItemCostingId = item.ItemCostingId;
                    app.RefNo = item.ShipmentId > 0 ? item.ShipmentRefNo : item.PORefno;
                    app.IsCompleted = item.SerialedItemStatus == "Completed";
                    $('#grid').getKendoGrid().dataSource.read();
                },
                setStatus: function (e) {
                    this.StatusFilter = e;
                    this.ItemCostingId = 0;
                    $('#gridSI').getKendoGrid().dataSource.read();
                    $('#grid').getKendoGrid().dataSource.read();
                },
                grid_CellClose: function (e) {
                    var $grid = $('#grid').getKendoGrid();
                    var fieldName = $grid.columns[e.container.index()].field;
                    var item = e.model;

                    var getColIndex = function (field) {
                        return $('#grid').find('[data-field="' + field + '"]').index()
                    };

                    if (!item.SerialNo || !item.SerialNo.trim().length) {
                        e.container.parent().find("td:eq(" + getColIndex('SerialNo') + ")").addClass('r-red');
                    }
                    else {
                        var items = $grid.dataSource.data();
                        var exists = $.grep(items, function (x) { return x.uid != item.uid && x.SerialNo == item.SerialNo });
                        if (exists.length) {
                            e.container.parent().find("td:eq(" + getColIndex('SerialNo') + ")").addClass('r-red');
                            kendoAlert(item.SerialNo + " already exists", true);
                        }
                        else
                            e.container.parent().find("td:eq(" + getColIndex('SerialNo') + ")").removeClass('r-red');
                    }
                },
                gridSIData: function () {
                    return { StatusFilter: this.StatusFilter };
                },
                gridData: function () {
                    return { ItemCostingId: this.ItemCostingId};
                }
            }
        });
    </script>

<script type="text/javascript">
    $(function () {
        var grid = $('#grid').getKendoGrid();

        grid.table.on('keydown', function (e) {
            if (e.keyCode === kendo.keys.TAB && $($(e.target).closest('.k-edit-cell'))[0]) {
                e.preventDefault();
                var currentNumberOfItems = grid.dataSource.view().length;
                var row = $(e.target).closest('tr').index();
                var col = grid.cellIndex($(e.target).closest('td'));

                var dataItem = grid.dataItem($(e.target).closest('tr'));
                var field = grid.columns[col].field;
                var value = $(e.target).val();
                dataItem.set(field, value);

                if (row >= 0 && row < currentNumberOfItems && col >= 0 && col < grid.columns.length) {
                    var nextCellRow = row;
                    var nextCellCol = col;

                    if (e.shiftKey) {
                        if (nextCellRow - 1 < 0) {
                            nextCellRow = currentNumberOfItems - 1;
                            nextCellCol--;
                        } else {
                            nextCellRow--;
                        }
                    } else {
                        if (nextCellRow + 1 >= currentNumberOfItems) {
                            nextCellRow = 0;
                            nextCellCol++;
                        } else {
                            nextCellRow++;
                        }
                    }

                    if (nextCellCol >= grid.columns.length || nextCellCol < 0) {
                        return;
                    }

                    // wait for cell to close and Grid to rebind when changes have been made
                    setTimeout(function () {
                        grid.editCell(grid.tbody.find("tr:eq(" + nextCellRow + ") td:eq(" + nextCellCol + ")"));
                    });
                }
            }
        });
    });
</script>
}


