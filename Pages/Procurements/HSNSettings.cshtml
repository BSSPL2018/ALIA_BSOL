@page
@using BSOL.Core.Entities
@{
    ViewBag.IsFolded = true;
    ViewBag.Title = "HSN Settings";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}
@if (!await Html.HasAccess(Forms.Procurement.ControlPanel))
{
    return;
}
@section BreadCrumb{
    @await Html.PartialAsync("Tabs", "Material Management/Control Panel")
}
<div class="components">
    <div class="row">
        <div id="displayContainer" class="col-md-4">
            @(Html.Kendo().Grid<Curency>().Name("grid")
                .Editable(Html, "Curency Settings", true, true)
                .Columns(c =>
                {
                    c.DeleteColumn(x => x.Id, "deleteCurrencies('#:uid#')").Width(10);
                    c.Bound(x => x.Currency);
                    c.MoneyColumn(x => x.ConversionRate).EditorTemplateName("MoneyEditor").Width(80);//.HtmlAttributes(new { @class = "editable" }).EditorTemplateName("MoneyEditor");
                })
                .DataSource(d => d.Ajax()
                .Batch(true)
                .ServerOperation(false)
                .Events(events => events.Error("grid_ErrorHandler").RequestEnd("gridCurrencies_RequestEnd"))
                .Read("ReadCurrencies", "Procurements")
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field("Id", typeof(long)).Editable(false);
                })
                .Create("UpdateCurrencies", "Procurements")
                .Update("UpdateCurrencies", "Procurements")
                )
                .Events(x => x.SaveChanges("gridCurrencies_SaveChanges"))
                .Sortable()
                .Navigatable()
                .AutoBind(true)
                .Navigatable()
                )

        </div>
        <div class="col-md-8">
            @(Html.Kendo().Grid<HSNSetting>().Name("gridHsnSetting")
                .Editable(Html, "HSN Settings", true, true)
                .Columns(c =>
                {
                    c.DeleteColumn(x => x.Id, "deleteHSNSetting('#:uid#')");
                    c.Bound(x => x.HSNCategory).Width(250);
                    c.Bound(x => x.HSNCode);
                    c.MoneyColumn(x => x.MFN).EditorTemplateName("MoneyEditor");
                    c.CheckedColumn(p => p.IsDefault).Center();

                })
                .Events(x => x.SaveChanges("gridHSNSettings_SaveChanges").CellClose("gridHSNSetting_CellClose"))
                .DataSource(d => d.Ajax()
                .Batch(true).ServerOperation(false).Read("ReadHSNSettings", "Procurements")
                .Model(m =>
                {
                    m.Id(f => f.Id);
                    m.Field("Id", typeof(long)).Editable(false);
                })
                .Create("UpdateHSNSettings", "Procurements")
                .Update("UpdateHSNSettings", "Procurements")
                .Events(x => x.Error("grid_ErrorHandler").RequestEnd("gridHSNSetting_RequestEnd")))
                .Scrollable()
                .Sortable()
                .EnableFilter()
                .Resizable(x => x.Columns(true))
                .HtmlAttributes(new { @class = "h-grid v-grid" })
                .Pageable(x => x.Refresh(true))
                .Navigatable()
                )
        </div>
    </div>
</div>

@*@section Script
    {*@

<script type="text/javascript">
    function gridCurrencies_SaveChanges(e) {
        var data = $(e.sender.element).getKendoGrid().dataSource.data();
        var dirty = $.grep(data, function (item) {
            return item.dirty || item.Id === 0;
        });
        var currencies = $.grep(dirty, function (item) {
            return !item.Currency;
        });

        var errors = [];

        //if (currencies && currencies.length == 0)
        //    errors.push("Currency details Should not be empty");

        if (currencies && currencies.length > 0) {
            $.each(currencies, function (i) {
                if (currencies[i].Currency == "" && currencies[i].ConversionRate == "") {
                    errors.push("Currency details should not be empty");
                    return;
                }
                if (currencies[i].Currency == "") {
                    errors.push("Please enter currency name");
                    return;
                }
                if (currencies[i].ConversionRate == "" || currencies[i].ConversionRate <= 0) {
                    errors.push("Currency conversion rate should be greater than 0");
                    return;
                }
            });
        }

        if (errors.length) {
            e.preventDefault();
            kendoAlert(errors.join("\n"), true);
        }
    }
    function gridCurrencies_RequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors)
            kendoAlert("Currency settings saved.");
    }

    function deleteCurrencies(uid) {
        var dataItem = $('#grid').getKendoGrid().dataSource.getByUid(uid);
        if (dataItem.Id == 0) {
            $('#grid').getKendoGrid().dataSource.cancelChanges(dataItem);
            return;
        }
        kendoConfirm("Do you want to delete this currency setting?", function () {
            $.postData("@Url.Action("DeleteCurrency", "Procurements")", { Id: dataItem.Id, Currency: dataItem.Currency, CurrencyRate: dataItem.CurrencyRate },
                function (data) {
                    kendoAlert(data.Message, data.HasError);
                    if (!data.HasError)
                        $('#grid').getKendoGrid().dataSource.read();
                });
        });
    }
    //HSN Setting starts here
    function gridHSNSettings_SaveChanges(e) {
        var data = $(e.sender.element).getKendoGrid().dataSource.data();
        var dirty = $.grep(data, function (item) {
            return item.dirty || item.Id === 0;
        });
        var HSNSetting = $.grep(dirty, function (item) {
            return !item.HSNCategory || !item.HSNCode;
        });

        var errors = [];

        //if (HSNSetting && HSNSetting.length == 0)
        //    errors.push("HSN setting details Should not be empty");
        if (HSNSetting && HSNSetting.length > 0) {
            $.each(HSNSetting, function (i) {
                if (HSNSetting[i].HSNCategory == "" && HSNSetting[i].HSNCode == "") {
                    errors.push("HSN setting details should not be empty");
                    return;
                }
                if (HSNSetting[i].HSNCategory == "") {
                    errors.push("Please enter HSN category");
                    return;
                }
                if (HSNSetting[i].HSNCode == "") {
                    errors.push("HSN Code should not be empty");
                    return;
                }

            });
        }

        if (errors.length) {
            e.preventDefault();
            kendoAlert(errors.join("\n"), true);
        }
    }

    function gridHSNSetting_RequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors)
            kendoAlert("HSN settings saved.");
    }
    function gridHSNSetting_CellClose(e) {
        var fieldName = this.columns[e.container.index()].field;
        var item = e.model;
        if (fieldName != "IsDefault" || !item.IsDefault)
            return;

        var data = $("#gridHsnSetting").getKendoGrid().dataSource.data();
        var defaultHsn = $.grep(data, function (x) {
            return x.IsDefault && x.uid != item.uid;
        });
        $.each(defaultHsn, function () {
            this.set("IsDefault", false);
        });
        $("#gridHsnSetting").getKendoGrid().refresh();
    }


    function deleteHSNSetting(uid) {
        var dataItem = $('#gridHsnSetting').getKendoGrid().dataSource.getByUid(uid);
        if (dataItem.Id == 0) {
            $('#gridHsnSetting').getKendoGrid().dataSource.cancelChanges(dataItem);
            return;
        }
        kendoConfirm("Do you want to delete this HSN setting?", function () {
            $.postData("@Url.Action("DeleteHSNSetting", "Procurements")", { Id: dataItem.Id, HSNCode: dataItem.HSNCode },
                function (data) {
                    kendoAlert(data.Message, data.HasError);
                    if (!data.HasError)
                        $('#gridHsnSetting').getKendoGrid().dataSource.read();
                });
        });
    }

</script>

@*}*@

